/**
 * Library of functions for the Lane Merge HMI
 */

//ensure the endExperiment() function will be called after the HTML page is loaded
window.addEventListener('load', endExperiment);

//these latches prevent removing items from classLists that haven't been added yet
var usedMergeReq = false;
var usedMReady = false;
var usedFReady = false;
var usedMComplete = false;
var usedFComplete = false;
var usedMergeReqAck = false;

//stores the selected speed
var roleDescription = "None";

//these allow status messages to stay displayed even if they have been turned off
//(some of them may appear and disappear too quickly for the user to easily see them)
var latchMessages = false;

//change the page content to show the experiment underway
function startExperiment() {
    var oldText = document.getElementById("currentContent").innerHTML;
    var newText = '' +
        '<h1 class="pageTitle" style="color:black text-align:center">Experiment Underway</h1>' +
        '<h2 class="roleReflector" style="color:black text-align:center" id="roleReflector">' +
         roleDescription + '</h2>' +

        '<div class="statusMsg dimColor" >' +
            '<p id="mergeRequest"    class="statusMsg dimColor"/> Merge Requested </p>' +
            '<p id="mergeRequestAck" class="statusMsg dimColor"/> Merge Request Received </p>' +
            '<p id="mergeMReady"     class="statusMsg dimColor"/> M Ready to Merge </p>' +
            '<p id="mergeFReady"     class="statusMsg dimColor"/> F Ready to Merge </p>' +
            '<p id="mergeMComplete"  class="statusMsg dimColor"/> M Complete </p>' +
            '<p id="mergeFComplete"  class="statusMsg dimColor"/> F Complete </p>' +
        '</div>' +

        '<button type="button" class="button" onclick="endExperiment(); ">End Experiment</button>';

    document.getElementById("currentContent").innerHTML = newText;

    //record the event in the server logger
    lanemergeAjax.ajaxLogEvent("Start experiment.");
}

//resets the display and loads the setup page content
//this gets called on page load, so sets up the initial user view
function endExperiment() {
    //clear all of the experiment status messages
    usedMergeReq = false;
    usedMReady = false;
    usedFReady = false;
    usedMComplete = false;
    usedFComplete = false;
    usedMergeReqAck = false;

    //load the user input page to start the experiment over
    var oldText = document.getElementById("currentContent").innerHTML;
    var newText = '' +

        '<!-- Generated by Javascript function endExperiment() -->' +
        '<div id="currentContent">'+

            '<div class="color:black text-align:center">' +
                '<h1 class="pageTitle">Vehicle Setup</h1>' +
            '</div>' +

            '<h2 class="padding-top:10px color:black roleMargin">Select Vehicle Role</h2> <br/>' +
            '<div id="roleSelector" class="roleSelector roleMargin" >' +
                    '<input type="radio" id="lead" name="role" value="1" onclick="speedSelectorOn();"/>' +
                    '<label for="lead" class="roleSelectorItem">Lead</label>' +
                    '<input type="radio" id="follow" name="role" value="3" onclick="speedSelectorOff();"/>' +
                    '<label for="follow" class="roleSelectorItem">Following</label>' +
                    '<input type="radio" id="merge" name="role" value="2" onclick="speedSelectorOff();"/>' +
                    '<label for="merge" class="roleSelectorItem">Merging</label>' +
            '</div>' +

            '<div id="speedSelectArea" style="visibility:hidden">' +
                '<h2 class="padding-top:50px color:black roleMargin">Select Operating Speed</h2> <br/>' +
                '<div id="speedSelector" class="roleSelector roleMargin">' +
                    '<input type="radio" id="15" name="speed" value="15"/>' +
                    '<label for="15" class="roleSelectorItem">15 mph</label>' +
                    '<input type="radio" id="20" name="speed" value="20"/>' +
                    '<label for="20" class="roleSelectorItem">20 mph</label>' +
                    '<input type="radio" id="25" name="speed" value="25"/>' +
                    '<label for="25" class="roleSelectorItem">25 mph</label>' +
                    '<input type="radio" id="30" name="speed" value="30"/>' +
                    '<label for="30" class="roleSelectorItem">30 mph</label>' +
                '</div>' +
            '</div>' +

            '<button type="button" class="button" onclick="specifyParams();">Start experiment</button>' +

        '</div>';

    document.getElementById("currentContent").innerHTML = newText;

    //record the event in the server logger
    lanemergeAjax.ajaxLogEvent("End experiment.");
}

//show/hide the speed selector
function speedSelectorOn() {
    speedSelectArea.style.visibility = "visible";
}

function speedSelectorOff() {
    speedSelectArea.style.visibility = "hidden";
}

function specifyParams() {
    "use strict";

    var vehicleRole = null;
    var operatingSpeed = "0";
    var complete = false;

    if (document.querySelector('input[name="role"]:checked') != null) {
        vehicleRole = document.querySelector('input[name="role"]:checked').value;

        //if lead role is selected (value 1) then we need to specify speed also, otherwise ignore speed
        if (vehicleRole == "1") {
            if (document.querySelector('input[name="speed"]:checked') != null) {
                operatingSpeed = document.querySelector('input[name="speed"]:checked').value;
                complete = true;
            }
        }else {
            complete = true;
        }
    }

    //only if we have specified all the necessary inputs should we proceed
    if (complete) {
        //store the vehicle role for future use
        switch (vehicleRole) {
        case "1":
            roleDescription = "I am the Lead vehicle";
            break;
        case "2":
            roleDescription = "I am the Merging vehicle";
            break;
        case "3":
            roleDescription = "I am the Following vehicle";
            break;
        default:
            roleDescription = "ROLE NOT SPECIFIED";
        }

        //pass the info to the server side
        lanemergeAjax.ajaxSetParameters(vehicleRole, operatingSpeed);

        //change the UI to experiment mode
        startExperiment();

    //else user didn't make a selection somewhere
    }else {
        alert("Please specify all requested inputs.");
    }
}

function displayUiMessage(uiMessage)   {
    "use strict"

    var messages = uiMessage.status;
    var latch = uiMessage.latchMessages;
    if (latch > 0) {
        latchMessages = true;
    }

    var divMergeReq = document.getElementById("mergeRequest");
    var divMergeReqAck = document.getElementById("mergeRequestAck");
    var divMReady = document.getElementById("mergeMReady");
    var divFReady = document.getElementById("mergeFReady");
    var divMComplete = document.getElementById("mergeMComplete");
    var divFComplete = document.getElementById("mergeFComplete");

    if (messages & 0x01) {
        if (usedMergeReq) {
            divMergeReq.classList.remove("dimColor");
        }
        divMergeReq.classList.add("highlightColor");
        usedMergeReq = true;
    }else if (usedMergeReq  &&  !latchMessages){
        divMergeReq.classList.remove("highlightColor");
        divMergeReq.classList.add("dimColor");
    }

    if (messages & 0x02) {
        if (usedMReady) {
            divMReady.classList.remove("dimColor");
        }
        divMReady.classList.add("highlightColor");
        usedMReady = true;
    }else if (usedMReady  &&  !latchMessages){
        divMReady.classList.remove("highlightColor");
        divMReady.classList.add("dimColor");
    }

    if (messages & 0x04) {
        if (usedFReady) {
            divFReady.classList.remove("dimColor");
        }
        divFReady.classList.add("highlightColor");
        usedFReady = true;
    }else if (usedFReady  &&  !latchMessages){
        divFReady.classList.remove("highlightColor");
        divFReady.classList.add("dimColor");
    }

    if (messages & 0x08) {
        if (usedMComplete) {
            divMComplete.classList.remove("dimColor");
        }
        divMComplete.classList.add("highlightColor");
        usedMComplete = true;
    }else if (usedMComplete  &&  !latchMessages){
        divMComplete.classList.remove("highlightColor");
        divMComplete.classList.add("dimColor");
    }

    if (messages & 0x10) {
        if (usedFComplete) {
            divFComplete.classList.remove("dimColor");
        }
        divFComplete.classList.add("highlightColor");
        usedFComplete = true;
    }else if (usedFComplete  &&  !latchMessages){
        divFComplete.classList.remove("highlightColor");
        divFComplete.classList.add("dimColor");
    }

    if (messages & 0x80) {
        if (usedMergeReqAck) {
            divMergeReqAck.classList.remove("dimColor");
        }
        divMergeReqAck.classList.add("highlightColor");
        usedMergeReqAck = true;
    }else if (usedMergeReqAck  &&  !latchMessages){
        divMergeReqAck.classList.remove("highlightColor");
        divMergeReqAck.classList.add("dimColor");
    }
}


function setVehicleRole(val) {
    "use strict"

}


function playAndroidSound() {
    // doesn't work on many android devices
    //document.getElementById("audioId").play();

    playSound('audio-fix');
}


function setDviStatusMessage(statusMessage)   {
    "use strict"

    setDviData("statusMessageId", statusMessage);

}


function setDviData(theId, theData)   {
    var id = document.getElementById(theId);
    id.innerHTML = theData;

}



$(window).load(function() {
    audioElements = document.getElementsByTagName('audio');

    for (var i = 0; i < audioElements.length; i++) {
        sounds[audioElements[i].className] = audioElements[i];
    }

// Solves chrome for andriod issue 178297 Require user gesture
// https://code.google.com/p/chromium/issues/detail?id=178297
// Fix based on code from http://blog.foolip.org/2014/02/10/media-playback-restrictions-in-blink/
    if (mediaPlaybackRequiresUserGesture()) {
        window.addEventListener('keydown', removeBehaviorsRestrictions);
        window.addEventListener('mousedown', removeBehaviorsRestrictions);
        window.addEventListener('touchstart', removeBehaviorsRestrictions);
    }

    connect();
});


$(window).unload(function() {
    disconnect();
});
